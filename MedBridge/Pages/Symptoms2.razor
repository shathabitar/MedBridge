@page "/doctors/doctor/{id}/history2"
@using MedBridge.Model
@inject NavigationManager _navigation
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using System.Text.Json
@using MedBridge.Services;

@inject SymptomService SymptomService

<h1>History</h1>
<h6 class="date">Today's Date: @currentDate</h6>

<div class="col-md-6 text-end backbtn"><button @onclick="BackToList">
        <svg height="16" width="16" xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 1024 1024">
            <path
                d="M874.690416 495.52477c0 11.2973-9.168824 20.466124-20.466124 20.466124l-604.773963 0 188.083679 188.083679c7.992021 7.992021 7.992021 20.947078 0 28.939099-4.001127 3.990894-9.240455 5.996574-14.46955 5.996574-5.239328 0-10.478655-1.995447-14.479783-5.996574l-223.00912-223.00912c-3.837398-3.837398-5.996574-9.046027-5.996574-14.46955 0-5.433756 2.159176-10.632151 5.996574-14.46955l223.019353-223.029586c7.992021-7.992021 20.957311-7.992021 28.949332 0 7.992021 8.002254 7.992021 20.957311 0 28.949332l-188.073446 188.073446 604.753497 0C865.521592 475.058646 874.690416 484.217237 874.690416 495.52477z">
            </path>
        </svg>
        <span>Back</span>
    </button>
</div>

<div class="form-group">
    <label for="symptoms">Add Symptom</label>
    <div class="symptom-input">
        <InputSelect @bind-Value="newSymptom.Name" id="symptoms" class="form-control">
            <option value="" disabled>Select a symptom</option>
            @if (patientSymptoms != null)
            {
                foreach (PatientSymptom symptom in patientSymptoms)
                {
                    <option value="@symptom.Id">@symptom.SymptomName</option>
                }
            }
            @* <option value="" disabled>Select a symptom</option>
            <option value="fever">Fever</option>
            <option value="headache">Headache</option>
            <option value="cough">Cough</option>
            <option value="sore_throat">Sore Throat</option>
            <option value="shortness_of_breath">Shortness of Breath</option>
            <option value="chest_pain">Chest Pain</option>
            <option value="nausea">Nausea</option>
            <option value="vomiting">Vomiting</option>
            <option value="diarrhea">Diarrhea</option>
            <option value="fatigue">Fatigue</option>
            <option value="muscle_aches">Muscle Aches</option>
            <option value="joint_pain">Joint Pain</option>
            <option value="dizziness">Dizziness</option>
            <option value="rash">Rash</option>
            <option value="abdominal_pain">Abdominal Pain</option>
            <option value="loss_of_appetite">Loss of Appetite</option>
            <option value="weight_loss">Weight Loss</option>
            <option value="sweating">Sweating</option>
            <option value="insomnia">Insomnia</option>
            <option value="anxiety">Anxiety</option>
            <option value="depression">Depression</option>
            <option value="itching">Itching</option>
            <option value="blurred_vision">Blurred Vision</option>
            <option value="ear_pain">Ear Pain</option>
            <option value="runny_nose">Runny Nose</option>
            <option value="congestion">Congestion</option>
            <option value="back_pain">Back Pain</option>
            <option value="frequent_urination">Frequent Urination</option>
            <option value="blood_in_urine">Blood in Urine</option>
            <option value="constipation">Constipation</option>
            <option value="heart_palpitations">Heart Palpitations</option> *@
        </InputSelect>
        <button class="btn btn-primary mt-2" @onclick="AddSymptom">Add Symptom</button>
    </div>
</div>

<div class="symptomList">
    <h3>Added Symptoms</h3>
    <ul>
        @foreach (var symptom in symptoms)
        {
            var symptomName = patientSymptoms.FirstOrDefault(s => s.Id == symptom.Name)?.SymptomName;
            <li>
                @symptomName
                <button class="btn btn-danger btn-sm ms-2" @onclick="() => RemoveSymptom(symptom)">Remove</button>
            </li>
        }
    </ul>
</div>

<div class="col-md-6 text-end backbtn next fixed-button-container"><button @onclick="SubmitHistory">
        <span>Next</span>
        <img width="20" height="20" src="https://img.icons8.com/ios/50/121212/long-arrow-right--v1.png"
            alt="long-arrow-right--v1" />
        <path fill="black"
            d="M25 35.5C24.1716 35.5 23.5 36.1716 23.5 37C23.5 37.8284 24.1716 38.5 25 38.5V35.5ZM49.0607 38.0607C49.6464 37.4749 49.6464 36.5251 49.0607 35.9393L39.5147 26.3934C38.9289 25.8076 37.9792 25.8076 37.3934 26.3934C36.8076 26.9792 36.8076 27.9289 37.3934 28.5147L45.8787 37L37.3934 45.4853C36.8076 46.0711 36.8076 47.0208 37.3934 47.6066C37.9792 48.1924 38.9289 48.1924 39.5147 47.6066L49.0607 38.0607ZM25 38.5L48 38.5V35.5L25 35.5V38.5Z">
        </path>
    </button>
</div>


@code {
    private string currentDate = DateTime.Now.ToString("dddd, MMMM dd, yyyy");
    private List<Symptom> symptoms = new();
    private Symptom newSymptom = new Symptom();
    private List<PatientSymptom> patientSymptoms;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPatientSymptoms();
    }

    private async Task LoadPatientSymptoms()
    {
        try
        {
            patientSymptoms = await JS.InvokeAsync<List<PatientSymptom>>("getPatientSymptoms");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading hospitals: {ex.Message}");
        }
    }
    private void AddSymptom()
    {
        if (!string.IsNullOrEmpty(newSymptom.Name))
        {
            symptoms.Add(new Symptom
                {
                    Name = newSymptom.Name
                });
            newSymptom = new Symptom(); // Reset input
        }
    }


    private void RemoveSymptom(Symptom symptom)
    {
        symptoms.Remove(symptom);
    }

    private void BackToList()
    {
        _navigation.NavigateTo($"/doctors/doctor/{Id}/history1");
    }

    private async Task SubmitHistory()
    {
        var userId = await LocalStorage.GetItemAsync<string>("UserID");
        Console.WriteLine($"UserID: {userId}");
        if (string.IsNullOrEmpty(userId))
        {
            Console.WriteLine("UserID is null or empty. Cannot proceed.");
            return;
        }

        foreach (var symptom in symptoms)
        {
            symptom.PatientId = userId;
        }


        string serializedSymptoms = JsonSerializer.Serialize(symptoms);

        try
        {
            await JS.InvokeVoidAsync("addSymptom", JsonSerializer.Deserialize<JsonElement>(serializedSymptoms));
            _navigation.NavigateTo($"/doctors/doctor/{Id}/history3");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in JavaScript call: {ex.Message}");
        }
    }


}
