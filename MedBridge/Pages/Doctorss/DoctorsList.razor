@page "/doctorss"
@using MedBridge.Model
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager _navigation


<h3>DoctorsList</h3>

@inject IJSRuntime JS

<div class="row">
    <div class="col-md-6">
        <h3 class="d-inline">Doctor List - Basic </h3>
    </div>
    <div class="col-md-6 text-end"><button class="d-inline btn btn-primary" @onclick="CreateDoctor">Add Doctor</button>
    </div>
</div>

@if (!isLoading)
{
    <div>
    <QuickGrid Items="@doctorsList">
        <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.LastName)" Sortable="true" />
        <TemplateColumn Align="Align.Center" Title="Actions">
            <button class="btn btn-primary m-1" @onclick="() => EditDoctor(context.Id)">Edit</button>
            <button class="btn btn-danger m-1" @onclick="() => Delete(context.Id)">Delete </button>
            <button class="btn btn btn-success m-1" @onclick="() => ViewDoctor(context.Id)">View </button>
        </TemplateColumn>
    </QuickGrid>
</div>
}

@code {
    private IQueryable<Doctors>? doctorsList = null;
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        await LoadDoctors();
    }

    private async Task LoadDoctors()
    {
        var doctors = await JS.InvokeAsync<List<Doctors>>("getDoctors");
        doctorsList = doctors.AsQueryable();
        isLoading = false;
        StateHasChanged();
    }

    private async void Delete(string id)
    {
        await JS.InvokeVoidAsync("deleteDoctor", id);
        LoadDoctors();
    }

    private void CreateDoctor()
    {
        _navigation.NavigateTo($"/doctors/createdoc");
    }

    private void EditDoctor(string id)
    {
        _navigation.NavigateTo($"/doctors/createdoc/{id}");
    }

    private void ViewDoctor(string id)
    {
        _navigation.NavigateTo($"/doctors/doctor/{id}");
    }
}